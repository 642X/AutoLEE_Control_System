#ifndef BSCANSERVER_H_
#define BSCANSERVER_H_

#include <stdlib.h>
#include <string>
#include <stdio.h>
#include <vector>
#include <thread>
#include <queue>
#include <iostream>
#include <mutex>
#include "HYYRobotInterface.h"
namespace bscan_server
{

enum{
    _start=1,
    _stop=2,
    _pause=3,
    _continue=4
};

class BscanServer
{
public:
	BscanServer(){}
	~BscanServer() {}
    void StartBscanServer(int cycle_times,HYYRobotBase::tool* tool,HYYRobotBase::wobj* wobj);
private:
    std::thread thread_;
    std::thread cmd_thread_;
    std::vector<std::vector<double>> server_data_;
    std::recursive_mutex data_lock_; 
    HYYRobotBase::tool tool_;
    HYYRobotBase::wobj wobj_;
    uint8_t server_state_;
    int input_feedback=0;
    void cmd_server();
    void state_server();
    void stop_server();
    void pause_server();
    void continue_server();
    void rpy2tr(double* rpy, double R[3][3], int flag);
    void tr2rpy(double R[3][3], double* rpy, int flag);

};




}

#endif /* BSCANSERVER_H_ */